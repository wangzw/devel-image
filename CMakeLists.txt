cmake_minimum_required(VERSION 3.24)

if (POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)
endif ()

project(devel)

if (CMAKE_TOOLCHAIN_FILE)
    if (NOT IS_ABSOLUTE ${CMAKE_TOOLCHAIN_FILE})
        cmake_path(ABSOLUTE_PATH CMAKE_TOOLCHAIN_FILE BASE_DIRECTORY ${CMAKE_SOURCE_DIR} NORMALIZE OUTPUT_VARIABLE CMAKE_TOOLCHAIN_FILE)
    endif ()
    message(STATUS "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
endif ()

set(CMAKE_INSTALL_LIBDIR lib)
set(DEVELOP_COMPILE_OPTIONS "${DEVELOP_COMPILE_OPTIONS} -D_GLIBCXX_USE_CXX11_ABI=1 -ffile-prefix-map=${CMAKE_BINARY_DIR}/src/= -fdebug-prefix-map=${CMAKE_BINARY_DIR}/src/=")

set(DEVELOP_STATIC_LINK_FLAGS "-L${CMAKE_INSTALL_PREFIX}/lib")
set(DEVELOP_EXEC_STATIC_LINK_FLAGS "-L${CMAKE_INSTALL_PREFIX}/lib")

if (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(DEVELOP_STATIC_LINK_FLAGS "-static-libstdc++ -static-libgcc -L${CMAKE_INSTALL_PREFIX}/lib")
    set(DEVELOP_EXEC_STATIC_LINK_FLAGS "-static-libstdc++ -static-libgcc -L${CMAKE_INSTALL_PREFIX}/lib")
endif ()

if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
    set(DEVELOP_COMPILE_OPTIONS "${DEVELOP_COMPILE_OPTIONS} -march=armv8.2-a")
elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
    set(DEVELOP_COMPILE_OPTIONS "${DEVELOP_COMPILE_OPTIONS} -march=armv8.5-a")
elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "amd64")
    set(DEVELOP_COMPILE_OPTIONS "${DEVELOP_COMPILE_OPTIONS} -march=x86-64-v3")
else ()
    message(FATAL_ERROR "${CMAKE_SYSTEM_PROCESSOR} is not supported")
endif ()

if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
    if ("${CMAKE_LIBRARY_ARCHITECTURE}" STREQUAL "")
        set(CMAKE_LIBRARY_ARCHITECTURE "aarch64")
    endif ()
endif ()

message(STATUS "CMAKE_SYSROOT: ${CMAKE_SYSROOT}")
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})
message(STATUS "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")
list(APPEND CMAKE_FIND_ROOT_PATH ${CMAKE_PREFIX_PATH})
message(STATUS "CMAKE_FIND_ROOT_PATH: ${CMAKE_FIND_ROOT_PATH}")

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/env-wrapper.sh.in env-wrapper.sh)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/devel-toolchain.cmake.in devel-toolchain.cmake @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/devel-toolchain.cmake DESTINATION ${CMAKE_INSTALL_PREFIX})

if (APPLE)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/brew-clang-19-toolchain.cmake brew-clang-19-toolchain.cmake COPYONLY)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/homebrew-macos.cmake homebrew-macos.cmake COPYONLY)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/brew-clang-19-toolchain.cmake DESTINATION ${CMAKE_INSTALL_PREFIX})
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/homebrew-macos.cmake DESTINATION ${CMAKE_INSTALL_PREFIX})
endif ()

if (DEFINED CMAKE_SYSROOT)
    set(SYSROOT_ARGS --sysroot=${CMAKE_SYSROOT})
endif ()

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    configure_file(${CMAKE_SOURCE_DIR}/strip-all.sh.in strip-all.sh @ONLY)
    file(CHMOD ${CMAKE_BINARY_DIR}/strip-all.sh PERMISSIONS OWNER_EXECUTE OWNER_READ OWNER_WRITE GROUP_READ GROUP_EXECUTE WORLD_EXECUTE)

    add_custom_target(strip-all
            COMMENT "Strip binaries"
            COMMAND ${CMAKE_BINARY_DIR}/strip-all.sh
    )
endif ()

include(ExternalProject)

ExternalProject_Add(bzip2-build
        PREFIX bzip2
        GIT_REPOSITORY "https://gitlab.com/bzip2/bzip2.git"
        GIT_TAG "66c46b8c9436613fd81bc5d03f63a61933a4dcc3"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/bzip2/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/bzip2/src/bzip2-1.0.9"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DENABLE_TESTS:BOOL=OFF
        -DENABLE_DOCS:BOOL=OFF
        -DENABLE_LIB_ONLY:BOOL=ON
        -DENABLE_WERROR:BOOL=OFF
        -DENABLE_DEBUG:BOOL=OFF
        -DENABLE_SHARED_LIB:BOOL=OFF
        -DENABLE_STATIC_LIB:BOOL=ON
)

add_custom_command(
        OUTPUT ${CMAKE_INSTALL_PREFIX}/lib/libbz2.a
        COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_INSTALL_PREFIX}/lib/libbz2_static.a ${CMAKE_INSTALL_PREFIX}/lib/libbz2.a
        DEPENDS bzip2-build
)

add_custom_target(bzip2 DEPENDS ${CMAKE_INSTALL_PREFIX}/lib/libbz2.a)

ExternalProject_Add(xz
        PREFIX xz
        URL "https://github.com/tukaani-project/xz/releases/download/v5.4.5/xz-5.4.5.tar.bz2"
        URL_HASH "MD5=260d9a1b24010da67bed65d4f7ace4dd"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/xz/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/xz/src/xz-5.4.5"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=FALSE
)

ExternalProject_Add(yaml-cpp
        PREFIX yaml-cpp
        URL "https://github.com/jbeder/yaml-cpp/archive/refs/tags/0.8.0.tar.gz"
        URL_HASH "MD5=1d2c7975edba60e995abe3c4af6480e5"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/yaml-cpp/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/yaml-cpp/src/yaml-cpp-0.8.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DYAML_BUILD_SHARED_LIBS:BOOL=FALSE
        -DYAML_CPP_BUILD_TESTS:BOOL=FALSE
)

ExternalProject_Add(simdjson
        PREFIX simdjson
        URL "https://github.com/simdjson/simdjson/archive/refs/tags/v3.10.1.tar.gz"
        URL_HASH "MD5=fcf0f0629f0e4bc7c170b65050d440ee"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/simdjson/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/simdjson/src/simdjson-3.10.1"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=FALSE
)

ExternalProject_Add(snappy
        PREFIX snappy
        URL "https://github.com/google/snappy/archive/refs/tags/1.1.10.tar.gz"
        URL_HASH "MD5=70153395ebe6d72febe2cf2e40026a44"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/snappy/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/snappy/src/snappy-1.1.10"
        PATCH_COMMAND patch -p1 < ${CMAKE_SOURCE_DIR}/snappy-1.1.10/snappy.patch
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DSNAPPY_BUILD_TESTS:BOOL=OFF
        -DSNAPPY_BUILD_BENCHMARKS:BOOL=OFF
        -DSNAPPY_REQUIRE_AVX:BOOL=ON
        -DSNAPPY_REQUIRE_AVX2:BOOL=ON
        -DSNAPPY_INSTALL:BOOL=ON
        -DSNAPPY_ENABLE_RTTI:BOOL=ON
)

ExternalProject_Add(toml11
        PREFIX toml11
        URL "https://github.com/ToruNiina/toml11/archive/refs/tags/v3.7.1.tar.gz"
        URL_HASH "MD5=5006fc79b6e72ac0fc2e665f2f5ad627"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/toml11/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/toml11/src/toml11-3.7.1"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
)

ExternalProject_Add(json
        PREFIX json
        URL "https://github.com/nlohmann/json/releases/download/v3.11.2/json.tar.xz"
        URL_HASH "MD5=127794b2c82c0c5693805feaa2a703e2"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/json/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/json/src/json-3.11.2"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DJSON_BuildTests:BOOL=FALSE
        -DJSON_Install:BOOL=TRUE
)

ExternalProject_Add(brotli
        PREFIX brotli
        URL "https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz"
        URL_HASH "MD5=3a6a3dba82a3604792d3cb0bd41bca60"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/brotli/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/brotli/src/brotli-1.1.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DBROTLI_DISABLE_TESTS:BOOL=ON
)

ExternalProject_Add(croncpp
        PREFIX croncpp
        URL "https://github.com/mariusbancila/croncpp/archive/refs/tags/v2023.03.30.tar.gz"
        URL_HASH "MD5=96ab8f761141d4c349cc8ec982897bfb"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/croncpp/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/croncpp/src/croncpp-v2023.03.30"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DCRONCPP_BUILD_TESTS:BOOL=OFF
        -DCRONCPP_BUILD_BENCHMARK:BOOL=OFF
)

ExternalProject_Add(zlib
        PREFIX zlib
        URL "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"
        URL_HASH "MD5=60373b133d630f74f4a1f94c1185a53f"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/zlib/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/zlib/src/zlib-1.3"
        PATCH_COMMAND patch -p1 < ${CMAKE_SOURCE_DIR}/zlib-1.3/zlib.patch
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
)

ExternalProject_Add(zstd
        PREFIX zstd
        URL "https://github.com/facebook/zstd/releases/download/v1.5.5/zstd-1.5.5.tar.gz"
        URL_HASH "MD5=63251602329a106220e0a5ad26ba656f"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/zstd/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/zstd/src/zstd-1.5.5"
        SOURCE_SUBDIR "build/cmake"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DZSTD_BUILD_SHARED:BOOL=OFF
        -DZSTD_BUILD_TESTS:BOOL=OFF
)

ExternalProject_Add(icu
        PREFIX icu
        URL "https://github.com/unicode-org/icu/releases/download/release-74-1/icu4c-74_1-src.tgz"
        URL_HASH "MD5=71e60b22697c4f35820a1897417dbab4"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/icu/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/icu/src/icu-74.1"
        BUILD_IN_SOURCE OFF
        DOWNLOAD_EXTRACT_TIMESTAMP ON
        CONFIGURE_COMMAND
        bash -x ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --cppflags -fPIC --
        ${CMAKE_BINARY_DIR}/icu/src/icu-74.1/source/configure
        --prefix=${CMAKE_INSTALL_PREFIX}
        --enable-static
        --disable-shared
        --disable-samples
        --disable-tests
        --with-data-packaging=static
        BUILD_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE)
        INSTALL_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) install
)

ExternalProject_Add(openssl
        PREFIX openssl
        URL "https://github.com/openssl/openssl/releases/download/openssl-3.1.4/openssl-3.1.4.tar.gz"
        URL_HASH "MD5=653ad58812c751b887e8ec37e02bba70"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/openssl/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/openssl/src/openssl-3.1.4"
        DOWNLOAD_EXTRACT_TIMESTAMP ON
        CONFIGURE_COMMAND
        KERNEL_BITS=64
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --
        ${CMAKE_BINARY_DIR}/openssl/src/openssl-3.1.4/config
        --api=1.1.0
        --release
        --with-zlib-include=${CMAKE_INSTALL_PREFIX}/include
        --with-zlib-lib=${CMAKE_INSTALL_PREFIX}/lib
        --libdir=lib
        --prefix=${CMAKE_INSTALL_PREFIX}
        no-tests
        no-shared
        BUILD_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE)
        INSTALL_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) install
        DEPENDS zlib zstd bzip2
)

ExternalProject_Add(sqlite
        PREFIX sqlite
        URL "https://github.com/sqlite/sqlite/archive/refs/tags/version-3.44.0.tar.gz"
        URL_HASH "MD5=fd3dc500eea1f43ffb15ae424346eb2d"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/sqlite/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/sqlite/src/sqlite-3.44.0"
        DOWNLOAD_EXTRACT_TIMESTAMP ON
        CONFIGURE_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --
        ${CMAKE_BINARY_DIR}/sqlite/src/sqlite-3.44.0/configure
        --enable-shared=no
        --disable-tcl
        --disable-readline
        --prefix=${CMAKE_INSTALL_PREFIX}
        BUILD_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE)
        INSTALL_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) install
        DEPENDS zlib
)

ExternalProject_Add(fmt
        PREFIX fmt
        URL "https://github.com/fmtlib/fmt/releases/download/10.1.1/fmt-10.1.1.zip"
        URL_HASH "MD5=5b74fd3cfa02058855379da416940efe"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/fmt/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/fmt/src/fmt-10.1.1"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DFMT_TEST:BOOL=OFF
)

ExternalProject_Add(libevent
        PREFIX libevent
        URL "https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz"
        URL_HASH "MD5=b5333f021f880fe76490d8a799cd79f4"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/libevent/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/libevent/src/libevent-2.1.12"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DOPENSSL_ROOT_DIR:PATH=${CMAKE_INSTALL_PREFIX}
        -DOPENSSL_USE_STATIC_LIBS:BOOL=TRUE
        -DEVENT__LIBRARY_TYPE:STRING=STATIC
        -DEVENT__DISABLE_BENCHMARK:BOOL=ON
        -DEVENT__DISABLE_TESTS:BOOL=ON
        -DEVENT__DISABLE_REGRESS:BOOL=ON
        -DEVENT__DISABLE_SAMPLES:BOOL=ON
        DEPENDS openssl zlib
)

ExternalProject_Add(spdlog
        PREFIX spdlog
        URL "https://github.com/gabime/spdlog/archive/refs/tags/v1.12.0.tar.gz"
        URL_HASH "MD5=6b4446526264c1d1276105482adc18d1"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/spdlog/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/spdlog/src/spdlog-1.12.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DSPDLOG_BUILD_EXAMPLE:BOOL=FALSE
        -DSPDLOG_BUILD_PIC:BOOL=TRUE
        -DSPDLOG_FMT_EXTERNAL:BOOL=TRUE
        -DSPDLOG_INSTALL:BOOL=TRUE
        -DSPDLOG_MASTER_PROJECT:BOOL=TRUE
        DEPENDS fmt
)

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    ExternalProject_Add(liburing
            PREFIX liburing
            URL "https://github.com/axboe/liburing/archive/refs/tags/liburing-2.8.tar.gz"
            URL_HASH "MD5=769d83fc56b7316579c361756cbf5ec1"
            DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/liburing/"
            SOURCE_DIR "${CMAKE_BINARY_DIR}/liburing/src/liburing-2.8"
            PATCH_COMMAND
            patch -p1 < ${CMAKE_SOURCE_DIR}/liburing-2.8/version.patch
            BUILD_IN_SOURCE ON
            DOWNLOAD_EXTRACT_TIMESTAMP ON
            CONFIGURE_COMMAND
            ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --
            ${CMAKE_BINARY_DIR}/liburing/src/liburing-2.8/configure
            --prefix=${CMAKE_INSTALL_PREFIX}
            BUILD_COMMAND
            ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) ENABLE_SHARED=0 V=1
            INSTALL_COMMAND
            ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) ENABLE_SHARED=0 V=1 install
    )
else ()
    add_custom_target(
            liburing
            COMMENT "Dummy liburing target"
    )
endif ()

ExternalProject_Add(boost
        PREFIX boost
        URL "https://github.com/boostorg/boost/releases/download/boost-1.84.0/boost-1.84.0.tar.gz"
        URL_HASH "MD5=1a84c4e387f491dedc0ece83c64bc815"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/boost/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/boost/src/boost-1.84.0"
        BUILD_IN_SOURCE OFF
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBOOST_ENABLE_PYTHON:BOOL=OFF
        -DBOOST_ENABLE_MPI:BOOL=OFF
        -DBUILD_TESTING:BOOL=OFF
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DBOOST_LOCALE_ENABLE_ICU:BOOL=ON
        DEPENDS zlib zstd openssl xz icu bzip2 liburing
)

ExternalProject_Add(googletest
        PREFIX googletest
        URL "https://github.com/google/googletest/archive/refs/tags/v1.14.0.tar.gz"
        URL_HASH "MD5=c8340a482851ef6a3fe618a082304cfc"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/googletest/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/googletest/src/googletest-1.14.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
)

ExternalProject_Add(glog
        PREFIX glog
        URL "https://github.com/google/glog/archive/refs/tags/v0.6.0.tar.gz"
        URL_HASH "MD5=c98a6068bc9b8ad9cebaca625ca73aa2"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/glog/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/glog/src/glog-0.6.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DENABLE_TESTING:BOOL=OFF
)

ExternalProject_Add(c-ares
        PREFIX c-ares
        URL "${CMAKE_SOURCE_DIR}/grpc-1.59.2/third_party/cares/cares"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/c-ares/src/cares"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCARES_SHARED:BOOL=OFF
        -DCARES_STATIC:BOOL=ON
        -DCARES_STATIC_PIC:BOOL=ON
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
)

ExternalProject_Add(curl
        PREFIX curl
        URL "https://github.com/curl/curl/releases/download/curl-8_4_0/curl-8.4.0.tar.bz2"
        URL_HASH "MD5=1a61fde1fe5c7db5c29c1196435188a5"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/curl/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/curl/src/curl-8.4.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DENABLE_ARES:BOOL=OFF
        -DOPENSSL_ROOT_DIR:PATH=${CMAKE_INSTALL_PREFIX}
        -DOPENSSL_USE_STATIC_LIBS:BOOL=TRUE
        -DZLIB_USE_STATIC_LIBS:BOOL=TRUE
        -DCURL_CA_BUNDLE_AUTODETECT:BOOL=TRUE
        -DCURL_CA_PATH_AUTODETECT:BOOL=TRUE
        DEPENDS zlib zstd openssl c-ares
)

ExternalProject_Add(cpr
        PREFIX cpr
        URL "https://github.com/libcpr/cpr/archive/refs/tags/1.10.5.tar.gz"
        URL_HASH "MD5=f3d8e11a956be4eb119300a81d6710cd"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/cpr/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/cpr/src/cpr-1.10.5"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCPR_USE_SYSTEM_CURL:BOOL=ON
        -DCPR_USE_SYSTEM_GTEST:BOOL=ON
        DEPENDS curl openssl
)

ExternalProject_Add(libxml2
        PREFIX libxml2
        URL "https://github.com/GNOME/libxml2/archive/refs/tags/v2.12.0.tar.gz"
        URL_HASH "MD5=db2e965771890acdb8ce7ef7010f57c9"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/libxml2/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/libxml2/src/libxml2-2.12.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DZLIB_USE_STATIC_LIBS:BOOL=TRUE
        -DLIBXML2_WITH_LZMA:BOOL=OFF
        -DLIBXML2_WITH_PYTHON:BOOL=OFF
        DEPENDS zlib zstd openssl c-ares xz icu
)

ExternalProject_Add(
        civetweb
        PREFIX civetweb
        URL "${CMAKE_SOURCE_DIR}/prometheus-cpp-1.1.0/3rdparty/civetweb"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/civetweb/src/civetweb"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCIVETWEB_BUILD_TESTING:BOOL=OFF
        -DCIVETWEB_ENABLE_SERVER_EXECUTABLE:BOOL=OFF
        -DCIVETWEB_ENABLE_ASAN:BOOL=OFF
        -DCIVETWEB_ENABLE_CXX:BOOL=ON
        -DOPENSSL_ROOT_DIR:PATH=${CMAKE_INSTALL_PREFIX}
        -DOPENSSL_USE_STATIC_LIBS:BOOL=TRUE
        DEPENDS openssl
)

ExternalProject_Add(
        prometheus-cpp
        PREFIX prometheus-cpp
        URL "${CMAKE_SOURCE_DIR}/prometheus-cpp-1.1.0"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/prometheus-cpp/src/prometheus-cpp-1.1.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DENABLE_TESTING:BOOL=OFF
        -DUSE_THIRDPARTY_LIBRARIES:BOOL=OFF
        -DOPENSSL_ROOT_DIR:PATH=${CMAKE_INSTALL_PREFIX}
        -DOPENSSL_USE_STATIC_LIBS:BOOL=TRUE
        DEPENDS curl civetweb
)

ExternalProject_Add(absl
        PREFIX absl
        URL "${CMAKE_SOURCE_DIR}/grpc-1.59.2/third_party/abseil-cpp"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/absl/src/abseil-cpp"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DABSL_BUILD_TESTING:BOOL=OFF
        -DABSL_ENABLE_INSTALL:BOOL=ON
        -DABSL_PROPAGATE_CXX_STD:BOOL=ON
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
)

ExternalProject_Add(benchmark
        PREFIX benchmark
        URL "${CMAKE_SOURCE_DIR}/grpc-1.59.2/third_party/benchmark"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/benchmark/src/benchmark"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBENCHMARK_ENABLE_TESTING:BOOL=OFF
        -DBENCHMARK_ENABLE_WERROR:BOOL=OFF
        -DBENCHMARK_INSTALL_DOCS:BOOL=OFF
        -DBENCHMARK_ENABLE_GTEST_TESTS:BOOL=OFF
)

ExternalProject_Add(protobuf
        PREFIX protobuf
        URL "${CMAKE_SOURCE_DIR}/grpc-1.59.2/third_party/protobuf"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/protobuf/src/protobuf"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DZLIB_USE_STATIC_LIBS:BOOL=TRUE
        -Dprotobuf_BUILD_TESTS:BOOL=OFF
        -Dprotobuf_MSVC_STATIC_RUNTIME:BOOL=OFF
        -Dprotobuf_WITH_ZLIB:BOOL=ON
        -Dprotobuf_ABSL_PROVIDER:STRING=package
        -DCMAKE_SKIP_RPATH:BOOL=ON
        DEPENDS zlib absl
)

ExternalProject_Add(re2
        PREFIX re2
        URL "${CMAKE_SOURCE_DIR}/grpc-1.59.2/third_party/re2"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/re2/src/re2"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
)

ExternalProject_Add(lz4
        PREFIX lz4
        URL "https://github.com/lz4/lz4/releases/download/v1.9.4/lz4-1.9.4.tar.gz"
        URL_HASH "MD5=e9286adb64040071c5e23498bf753261"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/lz4/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/lz4/src/lz4-1.9.4"
        SOURCE_SUBDIR "build/cmake"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DBUILD_SHARED_LIBS:BOOL=FALSE
        -DBUILD_STATIC_LIBS:BOOL=TRUE
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
)

ExternalProject_Add(grpc
        PREFIX grpc
        URL "${CMAKE_SOURCE_DIR}/grpc-1.59.2"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/grpc/src/grpc-1.59.2"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_CROSSCOMPILING:BOOL=OFF
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON

        -DgRPC_INSTALL:BOOL=ON
        -DgRPC_BUILD_TESTS:BOOL=OFF
        -DgRPC_BUILD_MSVC_MP_COUNT:STRING=-1

        -DgRPC_PROTOBUF_PROVIDER:STRING=package
        -DgRPC_PROTOBUF_PACKAGE_TYPE:STRING=CONFIG
        -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}

        -DgRPC_RE2_PROVIDER:STRING=package
        -Dre2_DIR:STRING=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/re2

        -DgRPC_ZLIB_PROVIDER:STRING=package
        -DZLIB_USE_STATIC_LIBS:BOOL=TRUE

        -DgRPC_ABSL_PROVIDER:STRING=package
        -Dabsl_DIR:STRING=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/absl

        -DgRPC_CARES_PROVIDER:STRING=package
        -Dc-ares_DIR:PATH=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/c-ares

        -DgRPC_SSL_PROVIDER:STRING=package
        -DOPENSSL_ROOT_DIR:PATH=${CMAKE_INSTALL_PREFIX}
        -DOPENSSL_USE_STATIC_LIBS:BOOL=TRUE

        DEPENDS c-ares protobuf re2 absl zlib openssl
)

ExternalProject_Add(opentelemetry-cpp
        PREFIX opentelemetry-cpp
        URL "https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.12.0.tar.gz"
        URL_HASH "MD5=5be6f2437ba53750a6d2bf39f03bc98d"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/opentelemetry-cpp/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/opentelemetry-cpp/src/opentelemetry-cpp-1.12.0"
        PATCH_COMMAND
        patch -p1 < ${CMAKE_SOURCE_DIR}/opentelemetry-cpp-1.12.0/opentelemetry-cpp.patch
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DBUILD_SHARED_LIBS:BOOL=FALSE
        -DBUILD_TESTING:BOOL=FALSE
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DWITH_BENCHMARK:BOOL=FALSE
        -DWITH_EXAMPLES:BOOL=FALSE
        -DWITH_OTLP_GRPC:BOOL=TRUE
        -DWITH_PROMETHEUS:BOOL=TRUE
        -DWITH_STL:BOOL=TRUE
        -DWITH_ZIPKIN:BOOL=TRUE
        -DWITH_ABSEIL:BOOL=TRUE
        -DWITH_STL:STRING=CXX20
        DEPENDS curl prometheus-cpp json protobuf absl grpc
)

ExternalProject_Add(asio-grpc
        PREFIX asio-grpc
        URL "https://github.com/Tradias/asio-grpc/archive/refs/tags/v2.7.0.tar.gz"
        URL_HASH "MD5=beee3952cbe6dd8a7c9f2c807195b3c6"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/asio-grpc/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/asio-grpc/src/asio-grpc-2.7.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        DEPENDS grpc
)

ExternalProject_Add(cxxopts
        PREFIX cxxopts
        URL "https://github.com/jarro2783/cxxopts/archive/refs/tags/v3.1.1.tar.gz"
        URL_HASH "MD5=61b8bf0d8ab97fd55d67c7c25687b26d"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/cxxopts/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/cxxopts/src/cxxopts-3.1.1"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCXXOPTS_BUILD_EXAMPLES:BOOL=OFF
        -DCXXOPTS_BUILD_TESTS:BOOL=OFF
        -DCXXOPTS_ENABLE_INSTALL:BOOL=ON
        DEPENDS icu
)

ExternalProject_Add(cpu_features
        PREFIX cpu_features
        URL "https://github.com/google/cpu_features/archive/refs/tags/v0.9.0.tar.gz"
        URL_HASH "MD5=383ee74871f1e85e625a32c7e72e7777"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/cpu_features/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/cpu_features/src/cpu_features-0.9.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_EXECUTABLE:BOOL=OFF
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DBUILD_TESTING:BOOL=OFF
        -DENABLE_INSTALL:BOOL=ON
)

ExternalProject_Add(kerberos
        PREFIX kerberos
        URL "https://github.com/krb5/krb5/archive/refs/tags/krb5-1.20.1-final.tar.gz"
        URL_HASH "MD5=7cfcfc0a5df0fa0fc744b68441569129"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/kerberos/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/kerberos/src/krb5-1.20.1"
        PATCH_COMMAND patch -p1 < ${CMAKE_SOURCE_DIR}/krb5-1.20.1/krb5.patch
        BUILD_IN_SOURCE OFF
        DOWNLOAD_EXTRACT_TIMESTAMP ON
        CONFIGURE_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --
        autoreconf ${CMAKE_BINARY_DIR}/kerberos/src/krb5-1.20.1/src/ &&
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --cppflags -fPIC --
        ${CMAKE_BINARY_DIR}/kerberos/src/krb5-1.20.1/src/configure
        --enable-static
        --disable-shared
        --enable-dns-for-realm
        --disable-nls
        --disable-silent-rules
        --without-libedit
        --without-readline
        --without-keyutils
        --without-system-verto
        --prefix=${CMAKE_INSTALL_PREFIX}
        BUILD_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE)
        INSTALL_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) install
        DEPENDS openssl
)

ExternalProject_Add(cyrus-sasl
        PREFIX cyrus-sasl
        URL "https://github.com/cyrusimap/cyrus-sasl/releases/download/cyrus-sasl-2.1.28/cyrus-sasl-2.1.28.tar.gz"
        URL_HASH "MD5=6f228a692516f5318a64505b46966cfa"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/cyrus-sasl/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/cyrus-sasl/src/cyrus-sasl-2.1.28"
        BUILD_IN_SOURCE OFF
        DOWNLOAD_EXTRACT_TIMESTAMP ON
        CONFIGURE_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --cppflags -DTIME_WITH_SYS_TIME --libs -lresolv --libs -ldl --
        ${CMAKE_BINARY_DIR}/cyrus-sasl/src/cyrus-sasl-2.1.28/configure
        --enable-static
        --disable-shared
        --enable-sample=no
        --with-sysroot=${CMAKE_INSTALL_PREFIX}
        --with-openssl=${CMAKE_INSTALL_PREFIX}
        --enable-gssapi=${CMAKE_INSTALL_PREFIX}
        --prefix=${CMAKE_INSTALL_PREFIX}
        --disable-macos-framework
        BUILD_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE)
        INSTALL_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) install
        DEPENDS kerberos openssl
)

ExternalProject_Add(gflags
        PREFIX gflags
        URL "https://github.com/gflags/gflags/archive/refs/tags/v2.2.2.tar.gz"
        URL_HASH "MD5=1a865b93bacfa963201af3f75b7bd64c"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/gflags/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/gflags/src/gflags-2.2.2"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DBUILD_STATIC_LIBS:BOOL=ON
        -DBUILD_TESTING:BOOL=OFF
        -DINSTALL_HEADERS:BOOL=ON
        -DINSTALL_STATIC_LIBS:BOOL=ON
)

ExternalProject_Add(double-conversion
        PREFIX double-conversion
        URL "https://github.com/google/double-conversion/archive/refs/tags/v3.3.0.tar.gz"
        URL_HASH "MD5=b344abb64084a4a1d98a43e67752989b"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/double-conversion/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/double-conversion/src/double-conversion-3.3.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DBUILD_STATIC_LIBS:BOOL=ON
        -DBUILD_TESTING:BOOL=OFF
)

ExternalProject_Add(xsimd
        PREFIX xsimd
        URL "https://github.com/xtensor-stack/xsimd/archive/refs/tags/11.2.0.tar.gz"
        URL_HASH "MD5=4bd459457be14b8bf9538ffc3916451f"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/xsimd/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/xsimd/src/xsimd-11.2.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_TESTS:BOOL=OFF
        -DBUILD_BENCHMARK:BOOL=OFF
        -DBUILD_EXAMPLES:BOOL=OFF
)

ExternalProject_Add(utf8proc
        PREFIX utf8proc
        URL "https://github.com/JuliaStrings/utf8proc/releases/download/v2.9.0/utf8proc-2.9.0.tar.gz"
        URL_HASH "MD5=a4895a4b0940e91bace9afede4f9c76b"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/utf8proc/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/utf8proc/src/utf8proc-2.9.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DUTF8PROC_INSTALL:BOOL=ON
        -DUTF8PROC_ENABLE_TESTING:BOOL=OFF
)

ExternalProject_Add(thrift
        PREFIX thrift
        URL "https://github.com/apache/thrift/archive/refs/tags/v0.19.0.tar.gz"
        URL_HASH "MD5=d786b7a707a7dbea52fc387000400caa"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/thrift/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/thrift/src/thrift-0.19.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_PROGRAM_PATH:PATH=/usr/local/opt/bison/bin/
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_TESTING:BOOL=OFF
        -DBUILD_CPP:BOOL=ON
        -DBUILD_C_GLIB:BOOL=OFF
        -DBUILD_JAVA:BOOL=OFF
        -DBUILD_JAVASCRIPT:BOOL=OFF
        -DBUILD_KOTLIN:BOOL=OFF
        -DBUILD_NODEJS:BOOL=OFF
        -DBUILD_PYTHON:BOOL=OFF
        -DBUILD_EXAMPLES:BOOL=OFF
        -DBUILD_TUTORIALS:BOOL=OFF
        -DWITH_STATIC_LIB:BOOL=ON
        -DOPENSSL_ROOT_DIR:PATH=${CMAKE_INSTALL_PREFIX}
        -DOPENSSL_USE_STATIC_LIBS:BOOL=TRUE
        DEPENDS boost zlib openssl
)

ExternalProject_Add(postgres
        PREFIX postgres
        URL "https://github.com/postgres/postgres/archive/refs/tags/REL_16_1.tar.gz"
        URL_HASH "MD5=d1b65dd4fbdf92ad12097780f82a5d6f"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/postgres/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/postgres/src/postgresql-16.1"
        BUILD_IN_SOURCE ON
        DOWNLOAD_EXTRACT_TIMESTAMP ON
        CONFIGURE_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --
        ${CMAKE_BINARY_DIR}/postgres/src/postgresql-16.1/configure
        --with-includes=${CMAKE_INSTALL_PREFIX}/include
        --with-libraries=${CMAKE_INSTALL_PREFIX}/lib
        --prefix=${CMAKE_INSTALL_PREFIX}/postgres
        --without-readline
        --without-icu
        BUILD_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) MAKELEVEL=0 MAKEFLAGS= MFLAGS=
        INSTALL_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) install
        DEPENDS openssl snappy zlib zstd
)

ExternalProject_Add(folly
        PREFIX folly
        URL "https://github.com/facebook/folly/releases/download/v2023.11.13.00/folly-v2023.11.13.00.tar.gz"
        URL_HASH "MD5=c327f24537fb6e39055dff7c0032615b"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/folly/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/folly/src/folly-2023.11.13.00"
        PATCH_COMMAND patch -p1 < ${CMAKE_SOURCE_DIR}/folly-2023.11.13.00/elf.patch
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_LIBRARY_ARCHITECTURE:STRING=${CMAKE_LIBRARY_ARCHITECTURE}
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DBOOST_LINK_STATIC:BOOL=ON
        -DFOLLY_NO_EXCEPTION_TRACER:BOOL=ON
        -DFOLLY_HAVE_INT128_T:BOOL=ON
        -DFOLLY_HAVE_WEAK_SYMBOLS_EXITCODE:STRING=0
        -DFOLLY_HAVE_LINUX_VDSO_EXITCODE:STRING=0
        -DFOLLY_HAVE_WCHAR_SUPPORT_EXITCODE:STRING=0
        -DFOLLY_HAVE_UNALIGNED_ACCESS_EXITCODE:STRING=0
        -DHAVE_VSNPRINTF_ERRORS_EXITCODE:STRING=0
        DEPENDS boost gflags glog double-conversion libevent fmt snappy lz4 xz icu zlib liburing
)

ExternalProject_Add(cctz
        PREFIX cctz
        URL "${CMAKE_SOURCE_DIR}/cctz"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/cctz/src/cctz"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_TOOLS:BOOL=OFF
        -DBUILD_EXAMPLES:BOOL=OFF
        -DBUILD_BENCHMARK:BOOL=OFF
        -DBUILD_TESTING:BOOL=OFF
)

ExternalProject_Add(doxygen
        PREFIX doxygen
        URL "https://github.com/doxygen/doxygen/archive/refs/tags/Release_1_14_0.tar.gz"
        URL_HASH "MD5=9c12e0438955cd7cb5d31c324b11aee6"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/doxygen/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/doxygen/src/doxygen-1.14.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_STANDARD:STRING=20
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_EXE_LINKER_FLAGS:STRING=${DEVELOP_EXEC_STATIC_LINK_FLAGS}
        -DCMAKE_FIND_ROOT_PATH:STRING=${CMAKE_FIND_ROOT_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_LIBRARY_ARCHITECTURE:STRING=${CMAKE_LIBRARY_ARCHITECTURE}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_PREFIX_PATH:STRING=${CMAKE_PREFIX_PATH}
)

ExternalProject_Add(apr
        PREFIX apr
        URL "https://github.com/apache/apr/archive/refs/tags/1.7.5.tar.gz"
        URL_HASH "MD5=843d390e0125ec089e88c1dca036cde3"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/apr/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/apr/src/apr-1.7.5"
        DOWNLOAD_EXTRACT_TIMESTAMP ON
        BUILD_IN_SOURCE ON
        CONFIGURE_COMMAND
        ${CMAKE_BINARY_DIR}/apr/src/apr-1.7.5/buildconf &&
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh --
        ${CMAKE_BINARY_DIR}/apr/src/apr-1.7.5/configure
        --enable-shared=no
        --enable-static=yes
        --with-pic=yes
        --prefix=${CMAKE_INSTALL_PREFIX}
        BUILD_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE)
        INSTALL_COMMAND
        ${CMAKE_CURRENT_BINARY_DIR}/env-wrapper.sh -- $(MAKE) install
        DEPENDS zlib
)

ExternalProject_Add(xerces-c
        PREFIX xerces-c
        URL "https://github.com/apache/xerces-c/archive/refs/tags/v3.3.0.tar.gz"
        URL_HASH "MD5=9662878f56e5bc1eb7a9b4c572d37a1d"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/xerces-c/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/xerces-c/src/xerces-c-v3.3.0"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        DEPENDS icu curl
)

ExternalProject_Add(stdexec
        PREFIX stdexec
        URL "https://github.com/NVIDIA/stdexec/archive/refs/tags/nvhpc-24.09.tar.gz"
        URL_HASH "MD5=119a00bab43653b9d50296c3d7c1f9db"
        DOWNLOAD_DIR "${CMAKE_SOURCE_DIR}/download/stdexec/"
        SOURCE_DIR "${CMAKE_BINARY_DIR}/stdexec/src/nvhpc-24.09"
        CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE}
        CMAKE_CACHE_ARGS
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
        -DCMAKE_C_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_CXX_FLAGS:STRING=${DEVELOP_COMPILE_OPTIONS}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DBUILD_TESTING:BOOL=OFF
        -DSTDEXEC_BUILD_TESTS:BOOL=OFF
        -DSTDEXEC_ENABLE_IO_URING_TESTS:BOOL=OFF
        -DSTDEXEC_BUILD_DOCS:BOOL=OFF
        -DSTDEXEC_BUILD_EXAMPLES:BOOL=OFF
        DEPENDS liburing
)
